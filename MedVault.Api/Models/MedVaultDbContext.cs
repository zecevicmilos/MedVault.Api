// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace MedVault.Api.Models;

public partial class MedVaultDbContext : DbContext
{
    public MedVaultDbContext()
    {
    }

    public MedVaultDbContext(DbContextOptions<MedVaultDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AppUsers> AppUsers { get; set; }

    public virtual DbSet<AuditLog> AuditLog { get; set; }

    public virtual DbSet<Consents> Consents { get; set; }

    public virtual DbSet<Departments> Departments { get; set; }

    public virtual DbSet<Encounters> Encounters { get; set; }

    public virtual DbSet<PatientIdentityDocuments> PatientIdentityDocuments { get; set; }

    public virtual DbSet<Patients> Patients { get; set; }

    public virtual DbSet<Roles> Roles { get; set; }

    public virtual DbSet<ScannedMedicalRecords> ScannedMedicalRecords { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=DESKTOP-19J4HR0;Initial Catalog=MedVaultDb;Integrated Security=True;Encrypt=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AppUsers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AppUsers__3214EC07E74DF44B");

            entity.HasIndex(e => e.UserName, "UQ__AppUsers__C9F2845633A082AE").IsUnique();

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_AppUsers_CreatedAt");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasAnnotation("Relational:DefaultConstraintName", "DF_AppUsers_IsActive");
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.Department).WithMany(p => p.AppUsers)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_AppUsers_Dep");

            entity.HasOne(d => d.Role).WithMany(p => p.AppUsers)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_AppUsers_Role");
        });

        modelBuilder.Entity<AuditLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AuditLog__3214EC0737C11AD4");

            entity.Property(e => e.Action)
                .IsRequired()
                .HasMaxLength(64);
            entity.Property(e => e.At)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_AuditLog_At");
            entity.Property(e => e.Details).HasMaxLength(1000);
            entity.Property(e => e.Entity)
                .IsRequired()
                .HasMaxLength(64);
            entity.Property(e => e.Ip).HasMaxLength(64);
        });

        modelBuilder.Entity<Consents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Consents__3214EC07345042D4");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.ConsentType)
                .IsRequired()
                .HasMaxLength(80);

            entity.HasOne(d => d.Patient).WithMany(p => p.Consents)
                .HasForeignKey(d => d.PatientId)
                .HasConstraintName("FK_Consents_Patient");
        });

        modelBuilder.Entity<Departments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Departme__3214EC0779E6294E");

            entity.HasIndex(e => e.Name, "UQ__Departme__737584F666EE58CA").IsUnique();

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(120);
        });

        modelBuilder.Entity<Encounters>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Encounte__3214EC07B3DB44AB");

            entity.HasIndex(e => new { e.PatientId, e.EncounterDate }, "IX_Encounters_Patient").IsDescending(false, true);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_Encounters_CreatedAt");

            entity.HasOne(d => d.Clinician).WithMany(p => p.Encounters)
                .HasForeignKey(d => d.ClinicianId)
                .HasConstraintName("FK_Encounters_User");

            entity.HasOne(d => d.Department).WithMany(p => p.Encounters)
                .HasForeignKey(d => d.DepartmentId)
                .HasConstraintName("FK_Encounters_Dep");

            entity.HasOne(d => d.Patient).WithMany(p => p.Encounters)
                .HasForeignKey(d => d.PatientId)
                .HasConstraintName("FK_Encounters_Patient");
        });

        modelBuilder.Entity<PatientIdentityDocuments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PatientI__3214EC07AA29C09E");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_PatientIdentityDocuments_CreatedAt");
            entity.Property(e => e.DocNumberEnc).IsRequired();
            entity.Property(e => e.DocType)
                .IsRequired()
                .HasMaxLength(40);

            entity.HasOne(d => d.Patient).WithMany(p => p.PatientIdentityDocuments)
                .HasForeignKey(d => d.PatientId)
                .HasConstraintName("FK_PatientIdentityDocuments_Patient");
        });

        modelBuilder.Entity<Patients>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Patients__3214EC0792EFBDB2");

            entity.HasIndex(e => e.JmbgHmac, "IX_Patients_JmbgHmac");

            entity.HasIndex(e => e.LastNameHmac, "IX_Patients_LastNameHmac");

            entity.HasIndex(e => e.MedicalRecordNumber, "UQ__Patients__8E549ED07057ABFE").IsUnique();

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_Patients_CreatedAt");
            entity.Property(e => e.FirstNameEnc).IsRequired();
            entity.Property(e => e.JMBGEnc).IsRequired();
            entity.Property(e => e.JmbgHmac)
                .IsRequired()
                .HasMaxLength(32)
                .IsFixedLength();
            entity.Property(e => e.LastNameEnc).IsRequired();
            entity.Property(e => e.LastNameHmac)
                .IsRequired()
                .HasMaxLength(32)
                .IsFixedLength();
            entity.Property(e => e.MedicalRecordNumber)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Department).WithMany(p => p.Patients)
                .HasForeignKey(d => d.DepartmentId)
                .HasConstraintName("FK_Patients_Dep");
        });

        modelBuilder.Entity<Roles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Roles__3214EC07DCBFAB45");

            entity.HasIndex(e => e.Name, "UQ__Roles__737584F6F2DCD4E4").IsUnique();

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(32);
        });

        modelBuilder.Entity<ScannedMedicalRecords>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ScannedM__3214EC07F1613268");

            entity.HasIndex(e => new { e.PatientId, e.CreatedAt }, "IX_ScannedMedicalRecords_Patient").IsDescending(false, true);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Blob).IsRequired();
            entity.Property(e => e.ContentType)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_ScannedMedicalRecords_CreatedAt");
            entity.Property(e => e.OriginalFileName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.RecordType)
                .IsRequired()
                .HasMaxLength(40);

            entity.HasOne(d => d.Patient).WithMany(p => p.ScannedMedicalRecords)
                .HasForeignKey(d => d.PatientId)
                .HasConstraintName("FK_ScannedMedicalRecords_Patient");

            entity.HasOne(d => d.UploadedByNavigation).WithMany(p => p.ScannedMedicalRecords)
                .HasForeignKey(d => d.UploadedBy)
                .HasConstraintName("FK_ScannedMedicalRecords_User");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}